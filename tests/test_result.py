import stormvogel.result
import stormpy
import pytest


def test_convert_model_checker_results_dtmc():
    path = stormpy.examples.files.prism_dtmc_die
    prism_program = stormpy.parse_prism_program(path)
    formula_str = "P=? [F s=7 & d=2]"
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0])

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None
    assert pytest.approx(list(stormvogel_result.values.values())) == [
        0.16666666666666669,
        0.33333333333333337,
        0.0,
        0.16666666666666674,
        0.5,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]


def test_convert_model_checker_results_dtmc_qualitative():
    path = stormpy.examples.files.prism_dtmc_die
    prism_program = stormpy.parse_prism_program(path)
    formula_str = "P>=0.5 [F s=7 & d=2]"
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0])

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
    ]


def test_convert_model_checker_results_mdp():
    path = stormpy.examples.files.prism_mdp_coin_2_2

    prism_program = stormpy.parse_prism_program(path)
    formula_str = 'Pmin=? [F "finished" & "all_coins_equal_1"]'
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0], extract_scheduler=True)

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        0.3828112753064229,
        0.265623936195459,
        0.4999986144173868,
        0.265623936195459,
        0.4999986144173868,
        0.265623936195459,
        0.15624925797353115,
        0.3749986144173868,
        0.5039048397998056,
        0.3749986144173868,
        0.6249986144173868,
        0.265623936195459,
        0.5039048397998056,
        0.265623936195459,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3828110651822245,
        0.5039048397998056,
        0.3828110651822245,
        0.6249986144173868,
        0.3749986144173868,
        0.6249986144173868,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3828110651822245,
        0.3828110651822245,
        0.6249986144173868,
        0.3828110651822245,
        0.6249986144173868,
        0.6269517249967417,
        0.15624925797353115,
        0.06249966380128266,
        0.24999885214577963,
        0.3828110651822245,
        0.24999885214577963,
        0.49999837668899394,
        0.15624925797353115,
        0.3828110651822245,
        0.26562375367545515,
        0.49999837668899394,
        0.6269517249967417,
        0.49999837668899394,
        0.7499988521457797,
        0.6269517249967417,
        0.15624925797353115,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.26562375367545515,
        0.26562375367545515,
        0.49999837668899394,
        0.24999885214577963,
        0.49999837668899394,
        0.5039045978477037,
        0.6269517249967417,
        0.5039045978477037,
        0.7499988521457797,
        0.7499988521457797,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.26562375367545515,
        0.5039045978477037,
        0.5039045978477037,
        0.7499988521457797,
        0.5039045978477037,
        0.7499988521457797,
        0.7509754061983613,
        0.06249966380128266,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.37499837668899394,
        0.06249966380128266,
        0.38281081900641334,
        0.6249983766889939,
        0.7509754061983613,
        0.6249983766889939,
        0.8749993276025654,
        0.7509754061983613,
        0.06249966380128266,
        0.0,
        0.12499932760256532,
        0.0,
        0.12499932760256532,
        0.6269514847941573,
        0.7509754061983613,
        0.6269514847941573,
        0.8749993276025654,
        0.8749993276025654,
        0.0,
        0.12499932760256532,
        0.0,
        0.12499932760256532,
        0.0,
        0.6269514847941573,
        0.8749993276025654,
        0.6269514847941573,
        0.8749993276025654,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999865520513065,
        0.0,
        0.0,
        0.0,
        0.5039043143831838,
        0.7499986552051308,
        0.8754876039041822,
        0.7499986552051308,
        1.0,
        0.8754876039041822,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.7509752078083645,
        0.937499790931729,
        0.7509752078083645,
        1.0,
        1.0,
        0.937499790931729,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.7499991637269159,
        1.0,
        0.7499991637269159,
        1.0,
        0.0,
        0.0,
        0.7499991637269159,
        0.7499991637269159,
        0.0,
        0.0,
        0.7499991637269159,
        0.7499991637269159,
        0.0,
        0.0,
        0.0,
        0.0,
        0.6249988173312626,
        0.8749995101225692,
        0.6249988173312626,
        0.8749995101225692,
        0.0,
        0.0,
        0.6249988173312626,
        0.6249988173312626,
        0.0,
        0.0,
        0.6249988173312626,
        0.6249988173312626,
        0.0,
        0.0,
        0.0,
        0.0,
        0.4999986144173868,
        0.7499990202451383,
        0.4999986144173868,
        0.7499990202451383,
        0.0,
        0.0,
        0.4999986144173868,
        0.4999986144173868,
        0.0,
        0.0,
        0.4999986144173868,
        0.4999986144173868,
        0.0,
        0.0,
        0.0,
        0.0,
        0.3749986144173868,
        0.6249986144173868,
        0.3749986144173868,
        0.6249986144173868,
        0.0,
        0.0,
        0.3749986144173868,
        0.3749986144173868,
        0.0,
        0.0,
        0.3749986144173868,
        0.3749986144173868,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999885214577963,
        0.49999837668899394,
        0.24999885214577963,
        0.49999837668899394,
        0.0,
        0.0,
        0.24999885214577963,
        0.24999885214577963,
        0.0,
        0.0,
        0.24999885214577963,
        0.24999885214577963,
        0.0,
        0.0,
        0.0,
        0.0,
        0.12499932760256532,
        0.37499837668899394,
        0.12499932760256532,
        0.37499837668899394,
        0.0,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.0,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999865520513065,
        0.0,
        0.24999865520513065,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]

    assert stormvogel_result.scheduler is not None
    assert [
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ] == [
        int(list(action.name)[0])
        for action in stormvogel_result.scheduler.taken_actions.values()
    ]


def test_convert_model_checker_results_mdp_qualitative():
    path = stormpy.examples.files.prism_mdp_coin_2_2

    prism_program = stormpy.parse_prism_program(path)
    formula_str = 'P>=0.5 [F "finished" & "all_coins_equal_1"]'
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0], extract_scheduler=True)

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ]
